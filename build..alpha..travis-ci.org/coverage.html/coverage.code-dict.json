{"/home/travis/build/npmtest/node-npmtest-httpp-proxy/test.js":"/* istanbul instrument in package npmtest_httpp_proxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-httpp-proxy/lib.npmtest_httpp_proxy.js":"/* istanbul instrument in package npmtest_httpp_proxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_httpp_proxy = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_httpp_proxy = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-httpp-proxy/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-httpp-proxy && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_httpp_proxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_httpp_proxy\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_httpp_proxy.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_httpp_proxy.rollup.js'] =\n            local.assetsDict['/assets.npmtest_httpp_proxy.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_httpp_proxy.__dirname + '/lib.npmtest_httpp_proxy.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-httpp-proxy/node_modules/httpp-proxy/lib/node-http-proxy.js":"/*\n  node-http-proxy.js: http proxy for node.js\n\n  Copyright (c) 2010 Charlie Robbins, Mikeal Rogers, Marak Squires, Fedor Indutny\n\n  Permission is hereby granted, free of charge, to any person obtaining\n  a copy of this software and associated documentation files (the\n  \"Software\"), to deal in the Software without restriction, including\n  without limitation the rights to use, copy, modify, merge, publish,\n  distribute, sublicense, and/or sell copies of the Software, and to\n  permit persons to whom the Software is furnished to do so, subject to\n  the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\nvar util = require('util'),\n    http = require('http'),\n    https = require('https'),\n    httpp = require('httpp'),\n    httpps = require('httpps'),\n    events = require('events'),\n    maxSockets = 100;\n\n//\n// Expose version information through `pkginfo`.\n//\nrequire('pkginfo')(module, 'version');\n\n//\n// ### Export the relevant objects exposed by `node-http-proxy`\n//\nvar HttpProxy    = exports.HttpProxy    = require('./node-http-proxy/http-proxy').HttpProxy,\n    ProxyTable   = exports.ProxyTable   = require('./node-http-proxy/proxy-table').ProxyTable,\n    RoutingProxy = exports.RoutingProxy = require('./node-http-proxy/routing-proxy').RoutingProxy;\n\n//\n// ### function createServer ([port, host, options, handler])\n// #### @port {number} **Optional** Port to use on the proxy target host.\n// #### @host {string} **Optional** Host of the proxy target.\n// #### @options {Object} **Optional** Options for the HttpProxy instance used\n// #### @handler {function} **Optional** Request handler for the server\n// Returns a server that manages an instance of HttpProxy. Flexible arguments allow for:\n//\n// * `httpProxy.createServer(9000, 'localhost')`\n// * `httpProxy.createServer(9000, 'localhost', options)\n// * `httpPRoxy.createServer(function (req, res, proxy) { ... })`\n//\nexports.createServer = function () {\n  var args = Array.prototype.slice.call(arguments),\n      handlers = [],\n      callback,\n      options = {},\n      message,\n      handler,\n      server,\n      proxy,\n      host,\n      port;\n\n  //\n  // Liberally parse arguments of the form:\n  //\n  //    httpProxy.createServer('localhost', 9000, callback);\n  //    httpProxy.createServer({ host: 'localhost', port: 9000 }, callback);\n  //    **NEED MORE HERE!!!**\n  //\n  args.forEach(function (arg) {\n    arg = Number(arg) || arg;\n    switch (typeof arg) {\n      case 'string':   host = arg; break;\n      case 'number':   port = arg; break;\n      case 'object':   options = arg || {}; break;\n      case 'function': callback = arg; handlers.push(callback); break;\n    };\n  });\n\n  //\n  // Helper function to create intelligent error message(s)\n  // for the very liberal arguments parsing performed by\n  // `require('http-proxy').createServer()`.\n  //\n  function validArguments() {\n    var conditions = {\n      'port and host': function () {\n        return port && host;\n      },\n      'options.target or options.router': function () {\n        return options && (options.router ||\n          (options.target && options.target.host && options.target.port));\n      },\n      'or proxy handlers': function () {\n        return handlers && handlers.length;\n      }\n    }\n\n    var missing = Object.keys(conditions).filter(function (name) {\n      return !conditions[name]();\n    });\n\n    if (missing.length === 3) {\n      message = 'Cannot proxy without ' + missing.join(', ');\n      return false;\n    }\n\n    return true;\n  }\n\n  if (!validArguments()) {\n    //\n    // If `host`, `port` and `options` are all not passed (with valid\n    // options) then this server is improperly configured.\n    //\n    throw new Error(message);\n    return;\n  }\n\n  //\n  // Hoist up any explicit `host` or `port` arguments\n  // that have been passed in to the options we will\n  // pass to the `httpProxy.HttpProxy` constructor.\n  //\n  options.target      = options.target      || {};\n  options.target.port = options.target.port || port;\n  options.target.host = options.target.host || host;\n\n  if (options.target && options.target.host && options.target.port) {\n    //\n    // If an explicit `host` and `port` combination has been passed\n    // to `.createServer()` then instantiate a hot-path optimized\n    // `HttpProxy` object and add the \"proxy\" middleware layer.\n    //\n    proxy = new HttpProxy(options);\n    handlers.push(function (req, res) {\n      proxy.proxyRequest(req, res);\n    });\n  }\n  else {\n    //\n    // If no explicit `host` or `port` combination has been passed then\n    // we have to assume that this is a \"go-anywhere\" Proxy (i.e. a `RoutingProxy`).\n    //\n    proxy = new RoutingProxy(options);\n\n    if (options.router) {\n      //\n      // If a routing table has been supplied than we assume\n      // the user intends us to add the \"proxy\" middleware layer\n      // for them\n      //\n      handlers.push(function (req, res) {\n        proxy.proxyRequest(req, res);\n      });\n\n      proxy.on('routes', function (routes) {\n        server.emit('routes', routes);\n      });\n    }\n  }\n\n  //\n  // Create the `http[s].Server` instance which will use\n  // an instance of `httpProxy.HttpProxy`.\n  //\n  handler = handlers.length > 1\n    ? exports.stack(handlers, proxy)\n    : function (req, res) { handlers[0](req, res, proxy) };\n  \n  // \n  // Create or hook existing http/https/httpp/httpps server\n  //\n  if (options.server) {\n    if ((options.httpp && options.https && (options.server instanceof httpps)) ||\n        (!options.httpp && options.https && (options.server instanceof https)) ||\n        (options.httpp && !options.https && (options.server instanceof httpp)) ||\n        (!options.httpp && !options.https && (options.server instanceof http))) {\n      server = options.server;\n    } else {\n      throw new Error('Invalid http server instance');\n      return;\n    }\n  } else {\n    server = options.https\n      ? (options.httpp ? httpps.createServer(options.https, handler) : https.createServer(options.https, handler))\n      : (options.httpp ? httpp.createServer(handler) : http.createServer(handler));\n  }\n\n  server.on('close', function () {\n    proxy.close();\n  });\n\n  if (!callback) {\n    //\n    // If an explicit callback has not been supplied then\n    // automagically proxy the request using the `HttpProxy`\n    // instance we have created.\n    //\n    server.on('upgrade', function (req, socket, head) {\n      proxy.proxyWebSocketRequest(req, socket, head);\n    });\n  }\n\n  //\n  // Set the proxy on the server so it is available\n  // to the consumer of the server\n  //\n  server.proxy = proxy;\n  return server;\n};\n\n//\n// ### function buffer (obj)\n// #### @obj {Object} Object to pause events from\n// Buffer `data` and `end` events from the given `obj`.\n// Consumers of HttpProxy performing async tasks\n// __must__ utilize this utility, to re-emit data once\n// the async operation has completed, otherwise these\n// __events will be lost.__\n//\n//      var buffer = httpProxy.buffer(req);\n//      fs.readFile(path, function () {\n//         httpProxy.proxyRequest(req, res, host, port, buffer);\n//      });\n//\n// __Attribution:__ This approach is based heavily on\n// [Connect](https://github.com/senchalabs/connect/blob/master/lib/utils.js#L157).\n// However, this is not a big leap from the implementation in node-http-proxy < 0.4.0.\n// This simply chooses to manage the scope of the events on a new Object literal as opposed to\n// [on the HttpProxy instance](https://github.com/nodejitsu/node-http-proxy/blob/v0.3.1/lib/node-http-proxy.js#L154).\n//\nexports.buffer = function (obj) {\n  var events = [],\n      onData,\n      onEnd;\n\n  obj.on('data', onData = function (data, encoding) {\n    events.push(['data', data, encoding]);\n  });\n\n  obj.on('end', onEnd = function (data, encoding) {\n    events.push(['end', data, encoding]);\n  });\n\n  return {\n    end: function () {\n      obj.removeListener('data', onData);\n      obj.removeListener('end', onEnd);\n    },\n    destroy: function () {\n      this.end();\n     \tthis.resume = function () {\n     \t  console.error(\"Cannot resume buffer after destroying it.\");\n     \t};\n\n     \tonData = onEnd = events = obj = null;\n    },\n    resume: function () {\n      this.end();\n      for (var i = 0, len = events.length; i < len; ++i) {\n        obj.emit.apply(obj, events[i]);\n      }\n    }\n  };\n};\n\n//\n// ### function getMaxSockets ()\n// Returns the maximum number of sockets\n// allowed on __every__ outgoing request\n// made by __all__ instances of `HttpProxy`\n//\nexports.getMaxSockets = function () {\n  return maxSockets;\n};\n\n//\n// ### function setMaxSockets ()\n// Sets the maximum number of sockets\n// allowed on __every__ outgoing request\n// made by __all__ instances of `HttpProxy`\n//\nexports.setMaxSockets = function (value) {\n  maxSockets = value;\n};\n\n//\n// ### function stack (middlewares, proxy)\n// #### @middlewares {Array} Array of functions to stack.\n// #### @proxy {HttpProxy|RoutingProxy} Proxy instance to\n// Iteratively build up a single handler to the `http.Server`\n// `request` event (i.e. `function (req, res)`) by wrapping\n// each middleware `layer` into a `child` middleware which\n// is in invoked by the parent (i.e. predecessor in the Array).\n//\n// adapted from https://github.com/creationix/stack\n//\nexports.stack = function stack (middlewares, proxy) {\n  var handle;\n  middlewares.reverse().forEach(function (layer) {\n    var child = handle;\n    handle = function (req, res) {\n      var next = function (err) {\n        if (err) {\n          if (res._headerSent) {\n            res.destroy();\n          }\n          else {\n            res.statusCode = 500;\n            res.setHeader('Content-Type', 'text/plain');\n            res.end('Internal Server Error');\n          }\n\n          console.error('Error in middleware(s): %s', err.stack);\n          return;\n        }\n\n        if (child) {\n          child(req, res);\n        }\n      };\n\n      //\n      // Set the prototype of the `next` function to the instance\n      // of the `proxy` so that in can be used interchangably from\n      // a `connect` style callback and a true `HttpProxy` object.\n      //\n      // e.g. `function (req, res, next)` vs. `function (req, res, proxy)`\n      //\n      next.__proto__ = proxy;\n      layer(req, res, next);\n    };\n  });\n\n  return handle;\n};\n\n//\n// ### function _getAgent (host, port, secure)\n// #### @options {Object} Options to use when creating the agent.\n//\n//    {\n//      host: 'localhost',\n//      port: 9000,\n//      https: true,\n//      httpp: false,\n//      maxSockets: 100\n//    }\n//\n// Createsan agent from the `http` or `https` or `httpp` or `httpps` module\n// and sets the `maxSockets` property appropriately.\n//\nexports._getAgent = function _getAgent (options) {\n  if (!options || !options.host) {\n    throw new Error('`options.host` is required to create an Agent.');\n  }\n\n  if (!options.port) {\n    options.port = options.https ? 443 : 80;\n  }\n\n  var Agent = options.https ? \n             (options.httpp ? httpps.Agent : https.Agent) : (options.httpp ? httpp.Agent : http.Agent),\n      agent;\n\n  // require('http-proxy').setMaxSockets() should override http's default\n  // configuration value (which is pretty low).\n  options.maxSockets = options.maxSockets || maxSockets;\n  \n  // set SSL related info\n  if (options.https && typeof options.https === 'object') {\n    ['pfx', 'key', 'passphrase', 'cert', 'ca', 'ciphers', 'rejectUnauthorized'].forEach(function (key) {\n      if (options.https[key]) {\n        options[key] = options.https[key];\n      }\n    });\n  }\n  \n  agent = new Agent(options);\n\n  return agent;\n}\n\n//\n// ### function _getProtocol (options)\n// #### @options {Object} Options for the proxy target.\n// Returns the appropriate node.js core protocol module (i.e. `http` or `https` or `httpp` or `httpps`) \n// based on the `options` supplied. \n//\nexports._getProtocol = function _getProtocol (options) {\n  return options.https ? (options.httpp ? httpps : https) : (options.httpp ? httpp : http);\n};\n\n\n//\n// ### function _getBase (options)\n// #### @options {Object} Options for the proxy target.\n// Returns the relevate base object to create on outgoing proxy request.\n// If `options.https` are supplied, this function respond with an object\n// containing the relevant 'pfx', 'key', 'passphrase', 'cert', 'ca', 'ciphers', and 'rejectUnauthorized' properties.\n//\nexports._getBase = function _getBase (options) {\n  var result = function () {};\n\n  if (options.https && typeof options.https === 'object') {\n    ['pfx', 'key', 'passphrase', 'cert', 'ca', 'ciphers', 'rejectUnauthorized'].forEach(function (key) {\n      if (options.https[key]) {\n        result.prototype[key] = options.https[key];\n      }\n    });\n  }\n\n  return result;\n};\n","/home/travis/build/npmtest/node-npmtest-httpp-proxy/node_modules/httpp-proxy/bin/node-http-proxy":"#!/usr/bin/env node\n\nvar path = require('path'),\n    fs = require('fs'),\n    util  = require('util'),\n    argv = require('optimist').argv,\n    httpProxy = require('../lib/node-http-proxy');\n\nvar help = [\n    \"usage: node-http-proxy [options] \",\n    \"\",\n    \"Starts a node-http-proxy server using the specified command-line options\",\n    \"\",\n    \"options:\",\n    \"  --port   PORT       Port that the proxy server should run on\",\n    \"  --host   HOST       Host that the proxy server should run on\",\n    \"  --target HOST:PORT  Location of the server the proxy will target\",\n    \"  --config OUTFILE    Location of the configuration file for the proxy server\",\n    \"  --silent            Silence the log output from the proxy server\",\n    \"  --user   USER       User to drop privileges to once server socket is bound\",\n    \"  -h, --help          You're staring at it\"\n].join('\\n');\n\nif (argv.h || argv.help || Object.keys(argv).length === 2) {\n  return util.puts(help);\n}\n\nvar location, config = {},\n    port = argv.port || 80, \n    host = argv.host || undefined, \n    target = argv.target;\n    user = argv.user;\n\n//\n// If we were passed a config, parse it\n//\nif (argv.config) {\n  try {\n    var data = fs.readFileSync(argv.config);\n    config = JSON.parse(data.toString());\n  } catch (ex) {\n    util.puts('Error starting node-http-proxy: ' + ex);\n    process.exit(1);\n  }\n}\n\n//\n// If `config.https` is set, then load the required file contents into the config options.\n//\nif (config.https) {\n  Object.keys(config.https).forEach(function (key) {\n    // If CA certs are specified, load those too.\n    if (key === \"ca\") {\n      for (var i=0; i < config.https.ca.length; i++) {\n        if (config.https.ca === undefined) {\n          config.https.ca = [];\n        }\n        config.https.ca[i] = fs.readFileSync(config.https[key][i], 'utf8');\n      }\n    } else {\n      config.https[key] = fs.readFileSync(config.https[key], 'utf8');\n    }\n  });\n}\n\n//\n// Check to see if we should silence the logs\n//\nconfig.silent = typeof argv.silent !== 'undefined' ? argv.silent : config.silent;\n\n//\n// If we were passed a target, parse the url string\n//\nif (typeof target === 'string') location = target.split(':');\n\n//\n// Create the server with the specified options\n//\nvar server;\nif (location) {\n  var targetPort = location.length === 1 ? 80 : parseInt(location[1]);\n  server = httpProxy.createServer(targetPort, location[0], config);\n}\nelse if (config.router) {\n  server = httpProxy.createServer(config);\n}\nelse {\n  return util.puts(help);\n}\n\n//\n// Start the server\n//\nif (host) {\n  server.listen(port, host);\n} else {\n  server.listen(port);\n}\n\n\n//\n// Drop privileges if requested\n//\nif (typeof user === 'string') {\n    process.setuid(user);\n}\n\n//\n// Notify that the server is started\n//\nif (!config.silent) {\n  util.puts('node-http-proxy server now listening on port: ' + port);\n}\n","/home/travis/build/npmtest/node-npmtest-httpp-proxy/node_modules/httpp-proxy/benchmark/websockets-throughput.js":"var crypto = require('crypto'),\n    WebSocket = require('ws'),\n    async = require('async'),\n    httpProxy = require('../');\n\nvar SERVER_PORT = 8415,\n    PROXY_PORT = 8514;\n\nvar testSets = [\n  {\n    size: 1024 * 1024, // 1 MB\n    count: 128         // 128 MB\n  },\n  {\n    size: 1024,        // 1 KB,\n    count: 1024        // 1 MB\n  },\n  {\n    size: 128,         // 128 B\n    count: 1024 * 8    // 1 MB\n  }\n];\n\ntestSets.forEach(function (set) {\n  set.buffer = new Buffer(crypto.randomBytes(set.size));\n\n  set.buffers = [];\n  for (var i = 0; i < set.count; i++) {\n    set.buffers.push(set.buffer);\n  }\n});\n\nfunction runSet(set, callback) {\n  function runAgainst(port, callback) {\n    function send(sock) {\n      sock.send(set.buffers[got++]);\n      if (got === set.count) {\n        t = new Date() - t;\n\n        server.close();\n        proxy.close();\n\n        callback(null, t);\n      }\n    }\n\n    var server = new WebSocket.Server({ port: SERVER_PORT }),\n        proxy = httpProxy.createServer(SERVER_PORT, 'localhost').listen(PROXY_PORT),\n        client = new WebSocket('ws://localhost:' + port),\n        got = 0,\n        t = new Date();\n\n    server.on('connection', function (ws) {\n      send(ws);\n\n      ws.on('message', function (msg) {\n        send(ws);\n      });\n    });\n\n    client.on('message', function () {\n      send(client);\n    });\n  }\n\n  async.series({\n    server: async.apply(runAgainst, SERVER_PORT),\n    proxy: async.apply(runAgainst, PROXY_PORT)\n  }, function (err, results) {\n    if (err) {\n      throw err;\n    }\n\n    var mb = (set.size * set.count) / (1024 * 1024);\n    console.log(set.size / (1024) + ' KB * ' + set.count + ' (' + mb + ' MB)');\n\n    Object.keys(results).forEach(function (key) {\n      var t = results[key],\n          throughput = mb / (t / 1000);\n\n      console.log('  ' + key + ' took ' + t + ' ms (' + throughput + ' MB/s)');\n    });\n\n    callback();\n  });\n}\n\nasync.forEachLimit(testSets, 1, runSet);\n"}