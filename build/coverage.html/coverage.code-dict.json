{"/home/travis/build/npmtest/node-npmtest-httpp-proxy/test.js":"/* istanbul instrument in package npmtest_httpp_proxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-httpp-proxy/lib.npmtest_httpp_proxy.js":"/* istanbul instrument in package npmtest_httpp_proxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_httpp_proxy = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_httpp_proxy = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-httpp-proxy/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-httpp-proxy && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_httpp_proxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_httpp_proxy\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_httpp_proxy.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_httpp_proxy.rollup.js'] =\n            local.assetsDict['/assets.npmtest_httpp_proxy.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_httpp_proxy.__dirname + '/lib.npmtest_httpp_proxy.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-httpp-proxy/node_modules/httpp-proxy/lib/node-http-proxy.js":"/*\n  node-http-proxy.js: http proxy for node.js\n\n  Copyright (c) 2010 Charlie Robbins, Mikeal Rogers, Marak Squires, Fedor Indutny\n\n  Permission is hereby granted, free of charge, to any person obtaining\n  a copy of this software and associated documentation files (the\n  \"Software\"), to deal in the Software without restriction, including\n  without limitation the rights to use, copy, modify, merge, publish,\n  distribute, sublicense, and/or sell copies of the Software, and to\n  permit persons to whom the Software is furnished to do so, subject to\n  the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\nvar util = require('util'),\n    http = require('http'),\n    https = require('https'),\n    httpp = require('httpp'),\n    httpps = require('httpps'),\n    events = require('events'),\n    maxSockets = 100;\n\n//\n// Expose version information through `pkginfo`.\n//\nrequire('pkginfo')(module, 'version');\n\n//\n// ### Export the relevant objects exposed by `node-http-proxy`\n//\nvar HttpProxy    = exports.HttpProxy    = require('./node-http-proxy/http-proxy').HttpProxy,\n    ProxyTable   = exports.ProxyTable   = require('./node-http-proxy/proxy-table').ProxyTable,\n    RoutingProxy = exports.RoutingProxy = require('./node-http-proxy/routing-proxy').RoutingProxy;\n\n//\n// ### function createServer ([port, host, options, handler])\n// #### @port {number} **Optional** Port to use on the proxy target host.\n// #### @host {string} **Optional** Host of the proxy target.\n// #### @options {Object} **Optional** Options for the HttpProxy instance used\n// #### @handler {function} **Optional** Request handler for the server\n// Returns a server that manages an instance of HttpProxy. Flexible arguments allow for:\n//\n// * `httpProxy.createServer(9000, 'localhost')`\n// * `httpProxy.createServer(9000, 'localhost', options)\n// * `httpPRoxy.createServer(function (req, res, proxy) { ... })`\n//\nexports.createServer = function () {\n  var args = Array.prototype.slice.call(arguments),\n      handlers = [],\n      callback,\n      options = {},\n      message,\n      handler,\n      server,\n      proxy,\n      host,\n      port;\n\n  //\n  // Liberally parse arguments of the form:\n  //\n  //    httpProxy.createServer('localhost', 9000, callback);\n  //    httpProxy.createServer({ host: 'localhost', port: 9000 }, callback);\n  //    **NEED MORE HERE!!!**\n  //\n  args.forEach(function (arg) {\n    arg = Number(arg) || arg;\n    switch (typeof arg) {\n      case 'string':   host = arg; break;\n      case 'number':   port = arg; break;\n      case 'object':   options = arg || {}; break;\n      case 'function': callback = arg; handlers.push(callback); break;\n    };\n  });\n\n  //\n  // Helper function to create intelligent error message(s)\n  // for the very liberal arguments parsing performed by\n  // `require('http-proxy').createServer()`.\n  //\n  function validArguments() {\n    var conditions = {\n      'port and host': function () {\n        return port && host;\n      },\n      'options.target or options.router': function () {\n        return options && (options.router ||\n          (options.target && options.target.host && options.target.port));\n      },\n      'or proxy handlers': function () {\n        return handlers && handlers.length;\n      }\n    }\n\n    var missing = Object.keys(conditions).filter(function (name) {\n      return !conditions[name]();\n    });\n\n    if (missing.length === 3) {\n      message = 'Cannot proxy without ' + missing.join(', ');\n      return false;\n    }\n\n    return true;\n  }\n\n  if (!validArguments()) {\n    //\n    // If `host`, `port` and `options` are all not passed (with valid\n    // options) then this server is improperly configured.\n    //\n    throw new Error(message);\n    return;\n  }\n\n  //\n  // Hoist up any explicit `host` or `port` arguments\n  // that have been passed in to the options we will\n  // pass to the `httpProxy.HttpProxy` constructor.\n  //\n  options.target      = options.target      || {};\n  options.target.port = options.target.port || port;\n  options.target.host = options.target.host || host;\n\n  if (options.target && options.target.host && options.target.port) {\n    //\n    // If an explicit `host` and `port` combination has been passed\n    // to `.createServer()` then instantiate a hot-path optimized\n    // `HttpProxy` object and add the \"proxy\" middleware layer.\n    //\n    proxy = new HttpProxy(options);\n    handlers.push(function (req, res) {\n      proxy.proxyRequest(req, res);\n    });\n  }\n  else {\n    //\n    // If no explicit `host` or `port` combination has been passed then\n    // we have to assume that this is a \"go-anywhere\" Proxy (i.e. a `RoutingProxy`).\n    //\n    proxy = new RoutingProxy(options);\n\n    if (options.router) {\n      //\n      // If a routing table has been supplied than we assume\n      // the user intends us to add the \"proxy\" middleware layer\n      // for them\n      //\n      handlers.push(function (req, res) {\n        proxy.proxyRequest(req, res);\n      });\n\n      proxy.on('routes', function (routes) {\n        server.emit('routes', routes);\n      });\n    }\n  }\n\n  //\n  // Create the `http[s].Server` instance which will use\n  // an instance of `httpProxy.HttpProxy`.\n  //\n  handler = handlers.length > 1\n    ? exports.stack(handlers, proxy)\n    : function (req, res) { handlers[0](req, res, proxy) };\n  \n  // \n  // Create or hook existing http/https/httpp/httpps server\n  //\n  if (options.server) {\n    if ((options.httpp && options.https && (options.server instanceof httpps)) ||\n        (!options.httpp && options.https && (options.server instanceof https)) ||\n        (options.httpp && !options.https && (options.server instanceof httpp)) ||\n        (!options.httpp && !options.https && (options.server instanceof http))) {\n      server = options.server;\n    } else {\n      throw new Error('Invalid http server instance');\n      return;\n    }\n  } else {\n    server = options.https\n      ? (options.httpp ? httpps.createServer(options.https, handler) : https.createServer(options.https, handler))\n      : (options.httpp ? httpp.createServer(handler) : http.createServer(handler));\n  }\n\n  server.on('close', function () {\n    proxy.close();\n  });\n\n  if (!callback) {\n    //\n    // If an explicit callback has not been supplied then\n    // automagically proxy the request using the `HttpProxy`\n    // instance we have created.\n    //\n    server.on('upgrade', function (req, socket, head) {\n      proxy.proxyWebSocketRequest(req, socket, head);\n    });\n  }\n\n  //\n  // Set the proxy on the server so it is available\n  // to the consumer of the server\n  //\n  server.proxy = proxy;\n  return server;\n};\n\n//\n// ### function buffer (obj)\n// #### @obj {Object} Object to pause events from\n// Buffer `data` and `end` events from the given `obj`.\n// Consumers of HttpProxy performing async tasks\n// __must__ utilize this utility, to re-emit data once\n// the async operation has completed, otherwise these\n// __events will be lost.__\n//\n//      var buffer = httpProxy.buffer(req);\n//      fs.readFile(path, function () {\n//         httpProxy.proxyRequest(req, res, host, port, buffer);\n//      });\n//\n// __Attribution:__ This approach is based heavily on\n// [Connect](https://github.com/senchalabs/connect/blob/master/lib/utils.js#L157).\n// However, this is not a big leap from the implementation in node-http-proxy < 0.4.0.\n// This simply chooses to manage the scope of the events on a new Object literal as opposed to\n// [on the HttpProxy instance](https://github.com/nodejitsu/node-http-proxy/blob/v0.3.1/lib/node-http-proxy.js#L154).\n//\nexports.buffer = function (obj) {\n  var events = [],\n      onData,\n      onEnd;\n\n  obj.on('data', onData = function (data, encoding) {\n    events.push(['data', data, encoding]);\n  });\n\n  obj.on('end', onEnd = function (data, encoding) {\n    events.push(['end', data, encoding]);\n  });\n\n  return {\n    end: function () {\n      obj.removeListener('data', onData);\n      obj.removeListener('end', onEnd);\n    },\n    destroy: function () {\n      this.end();\n     \tthis.resume = function () {\n     \t  console.error(\"Cannot resume buffer after destroying it.\");\n     \t};\n\n     \tonData = onEnd = events = obj = null;\n    },\n    resume: function () {\n      this.end();\n      for (var i = 0, len = events.length; i < len; ++i) {\n        obj.emit.apply(obj, events[i]);\n      }\n    }\n  };\n};\n\n//\n// ### function getMaxSockets ()\n// Returns the maximum number of sockets\n// allowed on __every__ outgoing request\n// made by __all__ instances of `HttpProxy`\n//\nexports.getMaxSockets = function () {\n  return maxSockets;\n};\n\n//\n// ### function setMaxSockets ()\n// Sets the maximum number of sockets\n// allowed on __every__ outgoing request\n// made by __all__ instances of `HttpProxy`\n//\nexports.setMaxSockets = function (value) {\n  maxSockets = value;\n};\n\n//\n// ### function stack (middlewares, proxy)\n// #### @middlewares {Array} Array of functions to stack.\n// #### @proxy {HttpProxy|RoutingProxy} Proxy instance to\n// Iteratively build up a single handler to the `http.Server`\n// `request` event (i.e. `function (req, res)`) by wrapping\n// each middleware `layer` into a `child` middleware which\n// is in invoked by the parent (i.e. predecessor in the Array).\n//\n// adapted from https://github.com/creationix/stack\n//\nexports.stack = function stack (middlewares, proxy) {\n  var handle;\n  middlewares.reverse().forEach(function (layer) {\n    var child = handle;\n    handle = function (req, res) {\n      var next = function (err) {\n        if (err) {\n          if (res._headerSent) {\n            res.destroy();\n          }\n          else {\n            res.statusCode = 500;\n            res.setHeader('Content-Type', 'text/plain');\n            res.end('Internal Server Error');\n          }\n\n          console.error('Error in middleware(s): %s', err.stack);\n          return;\n        }\n\n        if (child) {\n          child(req, res);\n        }\n      };\n\n      //\n      // Set the prototype of the `next` function to the instance\n      // of the `proxy` so that in can be used interchangably from\n      // a `connect` style callback and a true `HttpProxy` object.\n      //\n      // e.g. `function (req, res, next)` vs. `function (req, res, proxy)`\n      //\n      next.__proto__ = proxy;\n      layer(req, res, next);\n    };\n  });\n\n  return handle;\n};\n\n//\n// ### function _getAgent (host, port, secure)\n// #### @options {Object} Options to use when creating the agent.\n//\n//    {\n//      host: 'localhost',\n//      port: 9000,\n//      https: true,\n//      httpp: false,\n//      maxSockets: 100\n//    }\n//\n// Createsan agent from the `http` or `https` or `httpp` or `httpps` module\n// and sets the `maxSockets` property appropriately.\n//\nexports._getAgent = function _getAgent (options) {\n  if (!options || !options.host) {\n    throw new Error('`options.host` is required to create an Agent.');\n  }\n\n  if (!options.port) {\n    options.port = options.https ? 443 : 80;\n  }\n\n  var Agent = options.https ? \n             (options.httpp ? httpps.Agent : https.Agent) : (options.httpp ? httpp.Agent : http.Agent),\n      agent;\n\n  // require('http-proxy').setMaxSockets() should override http's default\n  // configuration value (which is pretty low).\n  options.maxSockets = options.maxSockets || maxSockets;\n  \n  // set SSL related info\n  if (options.https && typeof options.https === 'object') {\n    ['pfx', 'key', 'passphrase', 'cert', 'ca', 'ciphers', 'rejectUnauthorized'].forEach(function (key) {\n      if (options.https[key]) {\n        options[key] = options.https[key];\n      }\n    });\n  }\n  \n  agent = new Agent(options);\n\n  return agent;\n}\n\n//\n// ### function _getProtocol (options)\n// #### @options {Object} Options for the proxy target.\n// Returns the appropriate node.js core protocol module (i.e. `http` or `https` or `httpp` or `httpps`) \n// based on the `options` supplied. \n//\nexports._getProtocol = function _getProtocol (options) {\n  return options.https ? (options.httpp ? httpps : https) : (options.httpp ? httpp : http);\n};\n\n\n//\n// ### function _getBase (options)\n// #### @options {Object} Options for the proxy target.\n// Returns the relevate base object to create on outgoing proxy request.\n// If `options.https` are supplied, this function respond with an object\n// containing the relevant 'pfx', 'key', 'passphrase', 'cert', 'ca', 'ciphers', and 'rejectUnauthorized' properties.\n//\nexports._getBase = function _getBase (options) {\n  var result = function () {};\n\n  if (options.https && typeof options.https === 'object') {\n    ['pfx', 'key', 'passphrase', 'cert', 'ca', 'ciphers', 'rejectUnauthorized'].forEach(function (key) {\n      if (options.https[key]) {\n        result.prototype[key] = options.https[key];\n      }\n    });\n  }\n\n  return result;\n};\n","/home/travis/build/npmtest/node-npmtest-httpp-proxy/node_modules/httpp-proxy/benchmark/websockets-throughput.js":"var crypto = require('crypto'),\n    WebSocket = require('ws'),\n    async = require('async'),\n    httpProxy = require('../');\n\nvar SERVER_PORT = 8415,\n    PROXY_PORT = 8514;\n\nvar testSets = [\n  {\n    size: 1024 * 1024, // 1 MB\n    count: 128         // 128 MB\n  },\n  {\n    size: 1024,        // 1 KB,\n    count: 1024        // 1 MB\n  },\n  {\n    size: 128,         // 128 B\n    count: 1024 * 8    // 1 MB\n  }\n];\n\ntestSets.forEach(function (set) {\n  set.buffer = new Buffer(crypto.randomBytes(set.size));\n\n  set.buffers = [];\n  for (var i = 0; i < set.count; i++) {\n    set.buffers.push(set.buffer);\n  }\n});\n\nfunction runSet(set, callback) {\n  function runAgainst(port, callback) {\n    function send(sock) {\n      sock.send(set.buffers[got++]);\n      if (got === set.count) {\n        t = new Date() - t;\n\n        server.close();\n        proxy.close();\n\n        callback(null, t);\n      }\n    }\n\n    var server = new WebSocket.Server({ port: SERVER_PORT }),\n        proxy = httpProxy.createServer(SERVER_PORT, 'localhost').listen(PROXY_PORT),\n        client = new WebSocket('ws://localhost:' + port),\n        got = 0,\n        t = new Date();\n\n    server.on('connection', function (ws) {\n      send(ws);\n\n      ws.on('message', function (msg) {\n        send(ws);\n      });\n    });\n\n    client.on('message', function () {\n      send(client);\n    });\n  }\n\n  async.series({\n    server: async.apply(runAgainst, SERVER_PORT),\n    proxy: async.apply(runAgainst, PROXY_PORT)\n  }, function (err, results) {\n    if (err) {\n      throw err;\n    }\n\n    var mb = (set.size * set.count) / (1024 * 1024);\n    console.log(set.size / (1024) + ' KB * ' + set.count + ' (' + mb + ' MB)');\n\n    Object.keys(results).forEach(function (key) {\n      var t = results[key],\n          throughput = mb / (t / 1000);\n\n      console.log('  ' + key + ' took ' + t + ' ms (' + throughput + ' MB/s)');\n    });\n\n    callback();\n  });\n}\n\nasync.forEachLimit(testSets, 1, runSet);\n","/home/travis/build/npmtest/node-npmtest-httpp-proxy/node_modules/httpp-proxy/lib/node-http-proxy/http-proxy.js":"/*\n  node-http-proxy.js: http proxy for node.js\n\n  Copyright (c) 2010 Charlie Robbins, Mikeal Rogers, Marak Squires, Fedor Indutny\n\n  Permission is hereby granted, free of charge, to any person obtaining\n  a copy of this software and associated documentation files (the\n  \"Software\"), to deal in the Software without restriction, including\n  without limitation the rights to use, copy, modify, merge, publish,\n  distribute, sublicense, and/or sell copies of the Software, and to\n  permit persons to whom the Software is furnished to do so, subject to\n  the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\nvar events = require('events'),\n    http = require('http'),\n    util = require('util'),\n    url = require('url'),\n    httpProxy = require('../node-http-proxy');\n\n// perf monitor\nvar perfdbg = 0;\n\n//\n// ### function HttpProxy (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for new instances of HttpProxy responsible\n// for managing the life-cycle of streaming reverse proxyied HTTP requests.\n//\n// Example options:\n//\n//      {\n//        target: {\n//          host: 'localhost',\n//          port: 9000\n//        },\n//        forward: {\n//          host: 'localhost',\n//          port: 9001\n//        }\n//      }\n//\nvar HttpProxy = exports.HttpProxy = function (options) {\n  if (!options || !options.target) {\n    throw new Error('Both `options` and `options.target` are required.');\n  }\n\n  events.EventEmitter.call(this);\n\n  var self  = this;\n  \n  //\n  // Setup basic proxying options:\n  //\n  // * forward {Object} Options for a forward-proxy (if-any)\n  // * target {Object} Options for the **sole** proxy target of this instance\n  //\n  this.forward  = options.forward;\n  this.target   = options.target;\n  this.timeout = options.timeout;\n\n  //\n  // Setup the necessary instances instance variables for\n  // the `target` and `forward` `host:port` combinations\n  // used by this instance.\n  //\n  // * agent {http[s].Agent} Agent to be used by this instance.\n  // * protocol {http|https|httpp|httpps} Core node.js module to make requests with.\n  // * base {Object} Base object to create when proxying containing any https settings.\n  //\n  function setupProxy (key) {\n    self[key].agent    = httpProxy._getAgent(self[key]);\n    self[key].protocol = httpProxy._getProtocol(self[key]);\n    self[key].base     = httpProxy._getBase(self[key]);\n  }\n\n  setupProxy('target');\n  if (this.forward) {\n    setupProxy('forward');\n  }\n\n  //\n  // Setup opt-in features\n  //\n  this.enable          = options.enable || {};\n  this.enable.xforward = typeof this.enable.xforward === 'boolean'\n    ? this.enable.xforward\n    : true;\n\n  //\n  // Setup additional options for WebSocket proxying. When forcing\n  // the WebSocket handshake to change the `sec-websocket-location`\n  // and `sec-websocket-origin` headers `options.source` **MUST**\n  // be provided or the operation will fail with an `origin mismatch`\n  // by definition.\n  //\n  this.source       = options.source       || { host: 'localhost', port: 80 };\n  this.source.https = this.source.https    || options.https;\n  this.source.httpp = this.source.httpp    || options.httpp;\n  this.changeOrigin = options.changeOrigin || false;\n};\n\n// Inherit from events.EventEmitter\nutil.inherits(HttpProxy, events.EventEmitter);\n\n//\n// ### function proxyRequest (req, res, buffer)\n// #### @req {ServerRequest} Incoming HTTP Request to proxy.\n// #### @res {ServerResponse} Outgoing HTTP Request to write proxied data to.\n// #### @buffer {Object} Result from `httpProxy.buffer(req)`\n//\nHttpProxy.prototype.proxyRequest = function (req, res, buffer) {\n  var self = this,\n      errState = false,\n      outgoing = new(this.target.base),\n      reverseProxy,\n      location;\n\n  // If this is a DELETE request then set the \"content-length\"\n  // header (if it is not already set)\n  if (req.method === 'DELETE') {\n    req.headers['content-length'] = req.headers['content-length'] || '0';\n  }\n\n  //\n  // Add common proxy headers to the request so that they can\n  // be available to the proxy target server. If the proxy is\n  // part of proxy chain it will append the address:\n  //\n  // * `x-forwarded-for`: IP Address of the original request\n  // * `x-forwarded-proto`: Protocol of the original request\n  // * `x-forwarded-port`: Port of the original request.\n  //\n  if (this.enable.xforward && req.connection && req.socket) {\n    if (req.headers['x-forwarded-for']) {\n      var addressToAppend = \",\" + req.connection.remoteAddress || req.socket.remoteAddress;\n      req.headers['x-forwarded-for'] += addressToAppend;\n    }\n    else {\n      req.headers['x-forwarded-for'] = req.connection.remoteAddress || req.socket.remoteAddress;\n    }\n\n    if (req.headers['x-forwarded-port']) {\n      var portToAppend = \",\" + req.connection.remotePort || req.socket.remotePort;\n      req.headers['x-forwarded-port'] += portToAppend;\n    }\n    else {\n      req.headers['x-forwarded-port'] = req.connection.remotePort || req.socket.remotePort;\n    }\n\n    if (req.headers['x-forwarded-proto']) {\n      var protoToAppend = \",\" + getProto(req);\n      req.headers['x-forwarded-proto'] += protoToAppend;\n    }\n    else {\n      req.headers['x-forwarded-proto'] = getProto(req);\n    }\n  }\n\n  if (this.timeout) {\n    req.socket.setTimeout(this.timeout);\n  }\n\n  //\n  // Emit the `start` event indicating that we have begun the proxy operation.\n  //\n  this.emit('start', req, res, this.target);\n\n  //\n  // If forwarding is enabled for this instance, forward proxy the\n  // specified request to the address provided in `this.forward`\n  //\n  if (this.forward) {\n    this.emit('forward', req, res, this.forward);\n    this._forwardRequest(req);\n  }\n\n  //\n  // #### function proxyError (err)\n  // #### @err {Error} Error contacting the proxy target\n  // Short-circuits `res` in the event of any error when\n  // contacting the proxy target at `host` / `port`.\n  //\n  function proxyError(err) {\n    errState = true;\n\n    //\n    // Emit an `error` event, allowing the application to use custom\n    // error handling. The error handler should end the response.\n    //\n    if (self.emit('proxyError', err, req, res)) {\n      return;\n    }\n    \n    try {\n      res.writeHead(500, { 'Content-Type': 'text/plain' });\n\n      if (req.method !== 'HEAD') {\n        //\n        // This NODE_ENV=production behavior is mimics Express and\n        // Connect.\n        //\n        if (process.env.NODE_ENV === 'production') {\n          res.write('Internal Server Error');\n        }\n        else {\n          res.write('An error has occurred: ' + JSON.stringify(err));\n        }\n      }\n    } \n    catch (ex) {\n      console.error(\"res.writeHead error: %s\", ex.message) ;\n    }\n\n    try { res.end() }\n    catch (ex) { console.error(\"res.end error: %s\", ex.message); }\n  }\n\n  //\n  // Setup outgoing proxy with relevant properties.\n  //\n  outgoing.host       = this.target.host;\n  outgoing.hostname   = this.target.hostname;\n  outgoing.port       = this.target.port;\n  outgoing.socketPath = this.target.socketPath;\n  outgoing.agent      = this.target.agent;\n  outgoing.method     = req.method;\n  outgoing.path       = req.url.match(/^(https?:)/gi)? url.parse(req.url).path : req.url;\n  outgoing.headers    = req.headers;\n  \n  //\n  // Setup local interface to bind for target network connections\n  // \n  outgoing.localAddress = this.target.localAddress;\n  \n  //\n  // Setup custom createConnection\n  //\n  outgoing.createConnection = this.target.createConnection;\n      \n  // cache origin req.host\n  this.oriReqHost = req.headers.host;\n \n  //\n  // If the changeOrigin option is specified, change the\n  // origin of the host header to the target URL! Please\n  // don't revert this without documenting it!\n  //\n  function getPort (port, https) {\n    port = port || (htpps ? 443 : 80);\n    return ((port === 80) || (port === 443)) ? '' : ':' + port;\n  }\n  \n  var protocolName = this.target.https ? 'https' : 'http',\n      portUri      = getPort(this.target.port, this.target.https),\n      remoteHost   = this.target.host + portUri;\n\n  if (this.changeOrigin) {  \n    outgoing.headers.host   = remoteHost;\n    outgoing.headers.origin = protocolName + '://' + remoteHost;\n  }\n\n  //\n  // Open new HTTP request to internal resource with will act\n  // as a reverse proxy pass\n  //\n  reverseProxy = this.target.protocol.request(outgoing, function (response) {\n    //\n    // Process the `reverseProxy` `response` when it's received.\n    //\n    if (req.httpVersion === '1.0') {\n      if (req.headers.connection) {\n        response.headers.connection = req.headers.connection\n      } else {\n        response.headers.connection = 'close'\n      }\n    } else if (!response.headers.connection) {\n      if (req.headers.connection) { response.headers.connection = req.headers.connection }\n      else {\n        response.headers.connection = 'keep-alive'\n      }\n    }\n\n    // Remove `Transfer-Encoding` header if client's protocol is HTTP/1.0\n    // or if this is a DELETE request with no content-length header.\n    // See: https://github.com/nodejitsu/node-http-proxy/pull/373\n    if (req.httpVersion === '1.0' || (req.method === 'DELETE'\n      && !req.headers['content-length'])) {\n      delete response.headers['transfer-encoding'];\n    }\n\n    // Handle four redirection cases:\n    // 1. redirect to the same target with changeOrigin\n    // 2. redirect to the same target without changeOrigin\n    // 3. redirect to the different target with changeOrigin\n    // 4. redirect to the different target without changeOrigin\n    var oriReqUrl, sameHost, samePort, sameProto;\n    \n    function isLocalhost(host){\n\t    return ((host === 'localhost') || (host === '127.0.0.1') ||\n\t            (host === '0:0:0:0:0:0:0:1') || (host === '::1'));\n    }\n        \n    if ((response.statusCode === 301 || response.statusCode === 302)\n      && typeof response.headers.location !== 'undefined') {\n      location  = url.parse(response.headers.location, true, true);\n      oriReqUrl = url.parse((self.source.https ? 'https://':'http://')+self.oriReqHost, true, true);\n      \n      // handle default port\n      location.port  = location.port || ((location.protocol === 'https:') ? 443 : 80);\n      oriReqUrl.port = oriReqUrl.port || ((oriReqUrl.protocol === 'https:') ? 443 : 80);\n      \n      ///console.log('\\n\\nproxy,oriReqUrl:'+JSON.stringify(oriReqUrl)+'\\nlocation:'+JSON.stringify(location)+\n      ///            '\\ntarget.host:'+self.target.host+',target.port:'+self.target.port);\n      \n      sameHost  = self.changeOrigin ?  \n                  ((location.hostname === self.target.host) || (isLocalhost(location.hostname) && isLocalhost(self.target.host))) :\n                  ((location.hostname === oriReqUrl.hostname) || (isLocalhost(location.hostname) && isLocalhost(oriReqUrl.hostname)));\n                  \n      samePort  = self.changeOrigin ? \n                  (location.port === self.target.port) :\n                  (location.port === oriReqUrl.port);\n                  \n      sameProto = self.changeOrigin ?\n                 (location.protocol === (self.target.https ? 'https:':'http:')) :\n                 (location.protocol === (self.source.https ? 'https:':'http:'));\n      \n      if (sameHost && samePort && sameProto) {\n        response.headers.location = (self.source.https ? 'https://' : 'http://') + oriReqUrl.host + location.path;\n      }\n      \n      // case 3&4 should be handled by user custom logics\n      // ...\n    }\n    \n    //\n    // When the `reverseProxy` `response` ends, end the\n    // corresponding outgoing `res` unless we have entered\n    // an error state. In which case, assume `res.end()` has\n    // already been called and the 'error' event listener\n    // removed.\n    //\n    var ended = false;\n    response.on('close', function () {\n      ///console.log('response.onclose');\n      \n      if (!ended) { response.emit('end') }\n    });\n\n    //\n    // After reading a chunked response, the underlying socket\n    // will hit EOF and emit a 'end' event, which will abort\n    // the request. If the socket was paused at that time,\n    // pending data gets discarded, truncating the response.\n    // This code makes sure that we flush pending data.\n    //\n    response.connection.on('end', function () {\n      if (response.readable && response.resume) {\n        response.resume();\n      }\n    });\n\n    response.on('end', function () {\n      ///console.log('response.onend');\n      \n      ended = true;\n      if (!errState) {\n        try { res.end() }\n        catch (ex) { console.error(\"res.end error: %s\", ex.message) }\n\n        // Emit the `end` event now that we have completed proxying\n        self.emit('end', req, res, response);\n      }\n    });\n\n    // Allow observer to modify headers or abort response\n    try { self.emit('proxyResponse', req, res, response) }\n    catch (ex) {\n      errState = true;\n      return;\n    }\n    \n    // Set the headers of the client response\n    Object.keys(response.headers).forEach(function (key) {\n      res.setHeader(key, response.headers[key]);\n    });\n    res.writeHead(response.statusCode);\n    \n    var idx = 0;\n    function ondata(chunk) {\n      /*\n        console.log('response.ondata'+idx++);\n        console.log('chunk len:'+chunk.length);\n      */\n      \n      if (res.writable) {\n        // Only pause if the underlying buffers are full,\n        // *and* the connection is not in 'closing' state.\n        // Otherwise, the pause will cause pending data to\n        // be discarded and silently lost.\n        if (false === res.write(chunk) && response.pause\n            && response.connection.readable) {\n          ///console.log('response.pause(): chunk len:'+chunk.length);\n          response.pause();\n        }\n      }\n    }\n\n    response.on('data', ondata);\n\n    function ondrain() {\n      ///console.log('res.ondrain');\n      \n      if (response.readable && response.resume) {\n        ///console.log('response.resume()');\n        response.resume();\n      }\n    }\n\n    res.on('drain', ondrain);\n  });\n\n  //\n  // Handle 'error' events from the `reverseProxy`. Setup timeout override if needed\n  //\n  reverseProxy.once('error', proxyError);\n\n  // Set a timeout on the socket if `this.timeout` is specified.\n  reverseProxy.once('socket', function (socket) {\n    if (self.timeout) {\n      socket.setTimeout(self.timeout);\n    }\n      \n    // monitor proxy socket perf\n    if (perfdbg) {\n      var intl = setInterval(function(){\n        ///console.log('socket network performance:'+JSON.stringify(socket.netPerf));\n        if (socket && 'netPerf' in socket) {\n          var perf = socket.netPerf;\n          if (perf && 'mbpsBandwidth' in perf) {           \n            console.log('socket network Bandwidth       :'+JSON.stringify(perf.mbpsBandwidth)+' Mb/s');\n            console.log('socket network RTT             :'+JSON.stringify(perf.msRTT)+' ms');\n            console.log('socket network PktSndPeriod    :'+JSON.stringify(perf.usPktSndPeriod)+' us');\n            console.log('socket network SendRate        :'+JSON.stringify(perf.mbpsSendRate)+' Mb/s');\n            console.log('socket network RecvRate        :'+JSON.stringify(perf.mbpsRecvRate)+' Mb/s');\n            console.log('socket network CongestionWindow:'+JSON.stringify(perf.pktCongestionWindow));\n            console.log('socket network RecvACK         :'+JSON.stringify(perf.pktRecvACK));\n            console.log('socket network RecvNACK        :'+JSON.stringify(perf.pktRecvNAK));\n            console.log('socket network AvailRcvBuf     :'+JSON.stringify(perf.byteAvailRcvBuf));\n            console.log('socket network AvailSndBuf     :'+JSON.stringify(perf.byteAvailSndBuf)+'\\n\\n');\n          }\n        }\n      }, 10000); // every 10000\n      \n      // handle socket close event exception before end event\n      socket.once('close', function(){\n        clearInterval(intl);\n        console.log('socket.onclose');\n      });\n    }\n  });\n\t\t\t\t\t\t\t\t\n  //\n  // Handle 'error' events from the `req` (e.g. `Parse Error`).\n  //\n  req.on('error', proxyError);\n\n  //\n  // If `req` is aborted, we abort our `reverseProxy` request as well.\n  //\n  req.on('aborted', function () {\n    reverseProxy.abort();\n  });\n\n  //\n  // For each data `chunk` received from the incoming\n  // `req` write it to the `reverseProxy` request.\n  //\n  req.on('data', function (chunk) {\n    if (!errState) {\n      var flushed = reverseProxy.write(chunk);\n      if (!flushed) {\n        req.pause();\n        reverseProxy.once('drain', function () {\n          try { req.resume() }\n          catch (er) { console.error(\"req.resume error: %s\", er.message) }\n        });\n\n        //\n        // Force the `drain` event in 100ms if it hasn't\n        // happened on its own.\n        //\n        setTimeout(function () {\n          reverseProxy.emit('drain');\n        }, 100);\n      }\n    }\n  });\n\n  //\n  // When the incoming `req` ends, end the corresponding `reverseProxy`\n  // request unless we have entered an error state.\n  //\n  req.on('end', function () {\n    if (!errState) {\n      reverseProxy.end();\n    }\n  });\n  \n  // \n  // Handle req.trailers\n  //\n  if (req.trailers) {\n    if (!errState) {\n      reverseProxy.end();\n    }  \n  }\n  \n  //Aborts reverseProxy if client aborts the connection.\n  req.on('close', function () {\n    if (!errState) {\n      reverseProxy.abort();\n    }\n  });\n\n  //\n  // If we have been passed buffered data, resume it.\n  //\n  if (buffer) {\n    return !errState\n      ? buffer.resume()\n      : buffer.destroy();\n  }\n};\n\n//\n// ### function proxyWebSocketRequest (req, socket, head, buffer)\n// #### @req {ServerRequest} Websocket request to proxy.\n// #### @socket {net.Socket} Socket for the underlying HTTP request\n// #### @head {string} Headers for the Websocket request.\n// #### @buffer {Object} Result from `httpProxy.buffer(req)`\n// Performs a WebSocket proxy operation to the location specified by\n// `this.target`.\n//\nHttpProxy.prototype.proxyWebSocketRequest = function (req, socket, upgradeHead, buffer) {\n  var self      = this,\n      outgoing  = new(this.target.base),\n      listeners = {},\n      errState  = false,\n      CRLF      = '\\r\\n',\n      //copy upgradeHead to avoid retention of large slab buffers used in node core\n      head = new Buffer(upgradeHead.length);\n      upgradeHead.copy(head);\n\n   ///console.log('\\n\\nWs, head:'+JSON.stringify(head)+'\\n\\nreq.headers:'+JSON.stringify(req.headers));\n   ///console.log('\\n\\nWs,req.headers:'+JSON.stringify(req.headers));\n\n  //\n  // WebSocket requests must have the `GET` method and\n  // the `upgrade:websocket` header\n  //\n  if (req.method !== 'GET' || req.headers.upgrade.toLowerCase() !== 'websocket') {\n    //\n    // This request is not WebSocket request\n    //\n    return socket.destroy();\n  }\n\n  //\n  // Add common proxy headers to the request so that they can\n  // be availible to the proxy target server. If the proxy is\n  // part of proxy chain it will append the address:\n  //\n  // * `x-forwarded-for`: IP Address of the original request\n  // * `x-forwarded-proto`: Protocol of the original request\n  // * `x-forwarded-port`: Port of the original request.\n  //\n  if (this.enable.xforward && req.connection) {\n    if (req.headers['x-forwarded-for']) {\n      var addressToAppend = \",\" + req.connection.remoteAddress || socket.remoteAddress;\n      req.headers['x-forwarded-for'] += addressToAppend;\n    }\n    else {\n      req.headers['x-forwarded-for'] = req.connection.remoteAddress || socket.remoteAddress;\n    }\n\n    if (req.headers['x-forwarded-port']) {\n      var portToAppend = \",\" + req.connection.remotePort || socket.remotePort;\n      req.headers['x-forwarded-port'] += portToAppend;\n    }\n    else {\n      req.headers['x-forwarded-port'] = req.connection.remotePort || socket.remotePort;\n    }\n\n    if (req.headers['x-forwarded-proto']) {\n      var protoToAppend = \",\" + (req.connection.pair ? 'wss' : 'ws');\n      req.headers['x-forwarded-proto'] += protoToAppend;\n    }\n    else {\n      req.headers['x-forwarded-proto'] = req.connection.pair ? 'wss' : 'ws';\n    }\n  }\n\n  self.emit('websocket:start', req, socket, head, this.target);\n\n  //\n  // Helper function for setting appropriate socket values:\n  // 1. Turn off all bufferings\n  // 2. For server set KeepAlive\n  //\n  function _socket(socket, keepAlive) {\n    socket.setTimeout(0);\n    socket.setNoDelay(true);\n\n    if (keepAlive) {\n      if (socket.setKeepAlive) {\n        socket.setKeepAlive(true, 0);\n      }\n      else if (socket.pair.cleartext.socket.setKeepAlive) {\n        socket.pair.cleartext.socket.setKeepAlive(true, 0);\n      }\n    }\n  }\n\n  //\n  // Setup the incoming client socket.\n  //\n  _socket(socket, true);\n\n  //\n  // On `upgrade` from the Agent socket, listen to\n  // the appropriate events.\n  //\n  function onUpgrade (reverseProxy, proxySocket) {\n    if (!reverseProxy) {\n      proxySocket.end();\n      socket.end();\n      return;\n    }\n\n    //\n    // Any incoming data on this WebSocket to the proxy target\n    // will be written to the `reverseProxy` socket.\n    //\n    proxySocket.on('data', listeners.onIncoming = function (data) {\n      if (reverseProxy.incoming.socket.writable) {\n        try {\n          self.emit('websocket:outgoing', req, socket, head, data);\n          var flushed = reverseProxy.incoming.socket.write(data);\n          if (!flushed) {\n            proxySocket.pause();\n            reverseProxy.incoming.socket.once('drain', function () {\n              try { proxySocket.resume() }\n              catch (er) { console.error(\"proxySocket.resume error: %s\", er.message) }\n            });\n\n            //\n            // Force the `drain` event in 100ms if it hasn't\n            // happened on its own.\n            //\n            setTimeout(function () {\n              reverseProxy.incoming.socket.emit('drain');\n            }, 100);\n          }\n        }\n        catch (ex) {\n          detach();\n        }\n      }\n    });\n\n    //\n    // Any outgoing data on this Websocket from the proxy target\n    // will be written to the `proxySocket` socket.\n    //\n    reverseProxy.incoming.socket.on('data', listeners.onOutgoing = function (data) {\n      try {\n        self.emit('websocket:incoming', reverseProxy, reverseProxy.incoming, head, data);\n        var flushed = proxySocket.write(data);\n        if (!flushed) {\n          reverseProxy.incoming.socket.pause();\n          proxySocket.once('drain', function () {\n            try { reverseProxy.incoming.socket.resume() }\n            catch (er) { console.error(\"reverseProxy.incoming.socket.resume error: %s\", er.message) }\n          });\n\n          //\n          // Force the `drain` event in 100ms if it hasn't\n          // happened on its own.\n          //\n          setTimeout(function () {\n            proxySocket.emit('drain');\n          }, 100);\n        }\n      }\n      catch (ex) {\n        detach();\n      }\n    });\n\n    //\n    // Helper function to detach all event listeners\n    // from `reverseProxy` and `proxySocket`.\n    //\n    function detach() {\n      proxySocket.destroySoon();\n      proxySocket.removeListener('end', listeners.onIncomingClose);\n      proxySocket.removeListener('data', listeners.onIncoming);\n      reverseProxy.incoming.socket.destroySoon();\n      reverseProxy.incoming.socket.removeListener('end', listeners.onOutgoingClose);\n      reverseProxy.incoming.socket.removeListener('data', listeners.onOutgoing);\n    }\n\n   //\n    // If the incoming `proxySocket` socket closes, then\n    // detach all event listeners.\n    //\n    listeners.onIncomingClose = function () {\n      reverseProxy.incoming.socket.destroy();\n      detach();\n\n      // Emit the `end` event now that we have completed proxying\n      self.emit('websocket:end', req, socket, head);\n    }\n\n    //\n    // If the `reverseProxy` socket closes, then detach all\n    // event listeners.\n    //\n    listeners.onOutgoingClose = function () {\n      proxySocket.destroy();\n      detach();\n    }\n\n    proxySocket.on('end', listeners.onIncomingClose);\n    proxySocket.on('close', listeners.onIncomingClose);\n    reverseProxy.incoming.socket.on('end', listeners.onOutgoingClose);\n    reverseProxy.incoming.socket.on('close', listeners.onOutgoingClose);\n  }\n\n  function getPort (port, https) {\n    port = port || (htpps ? 443 : 80);\n    return ((port === 80) || (port === 443)) ? '' : ':' + port;\n  }\n\n  //\n  // Get the protocol, and host for this request and create an instance\n  // of `http.Agent` or `https.Agent` or `httpp.Agent` or `httpps.Agent`\n  // from the pool managed by `node-http-proxy`.\n  //\n  var agent        = this.target.agent,\n      protocolName = this.target.https ? 'https' : 'http',\n      portUri      = getPort(this.target.port, this.target.https),\n      remoteHost   = this.target.host + portUri;\n\n  //\n  // Make the outgoing WebSocket request\n  //\n  outgoing.host    = this.target.host;\n  outgoing.port    = this.target.port;\n  outgoing.method  = 'GET';\n  outgoing.path    = req.url.match(/^(https?:)/gi)? url.parse(req.url).path : req.url;\n  outgoing.headers = req.headers;\n  outgoing.agent   = agent;\n \n  // cache origin req.host\n  this.oriReqHost  = req.headers.host;\n \n  //\n  // Change headers (if requested).\n  // \n  if (this.changeOrigin) {\n    outgoing.headers.host   = remoteHost;\n    outgoing.headers.origin = protocolName + '://' + remoteHost;\n  }\n  \n  //\n  // Setup local interface to bind for target network connections\n  // \n  outgoing.localAddress = this.target.localAddress;\n  \n  //\n  // Setup custom createConnection\n  //\n  outgoing.createConnection = this.target.createConnection;\n      \n  var reverseProxy = this.target.protocol.request(outgoing);\n\n  //\n  // On any errors from the `reverseProxy` emit the\n  // `webSocketProxyError` and close the appropriate\n  // connections.\n  //\n  function proxyError (err) {\n    reverseProxy.destroy();\n\n    process.nextTick(function () {\n      //\n      // Destroy the incoming socket in the next tick, in case the error handler\n      // wants to write to it.\n      //\n      socket.destroy();\n    });\n\n    self.emit('webSocketProxyError', err, req, socket, head);\n  }\n\n  //\n  // Here we set the incoming `req`, `socket` and `head` data to the outgoing\n  // request so that we can reuse this data later on in the closure scope\n  // available to the `upgrade` event. This bookkeeping is not tracked anywhere\n  // in nodejs core and is **very** specific to proxying WebSockets.\n  //\n  reverseProxy.incoming = {\n    request: req,\n    socket: socket,\n    head: head\n  };\n\n  //\n  // Here we set the handshake `headers` and `statusCode` data to the outgoing\n  // request so that we can reuse this data later.\n  //\n  reverseProxy.handshake = {\n    headers: {},\n    statusCode: null,\n  }\n\n  //\n  // If the agent for this particular `host` and `port` combination\n  // is not already listening for the `upgrade` event, then do so once.\n  // This will force us not to disconnect.\n  //\n  // In addition, it's important to note the closure scope here. Since\n  // there is no mapping of the socket to the request bound to it.\n  //\n  reverseProxy.on('upgrade', function (res, remoteSocket, head) {\n    //\n    // Prepare handshake response 'headers' and 'statusCode'.\n    //\n    reverseProxy.handshake = {\n      headers: res.headers,\n      statusCode: res.statusCode,\n    }\n\n    //\n    // Prepare the socket for the reverseProxy request and begin to\n    // stream data between the two sockets. Here it is important to\n    // note that `remoteSocket._httpMessage === reverseProxy`.\n    //\n    _socket(remoteSocket, true);\n    onUpgrade(remoteSocket._httpMessage, remoteSocket);\n  });\n\n  //\n  // If the reverseProxy connection has an underlying socket,\n  // then execute the WebSocket handshake.\n  //\n  reverseProxy.once('socket', function (revSocket) {\n    revSocket.on('data', function handshake (data) {\n      // Set empty headers\n      var headers = '';\n\n      //\n      // If the handshake statusCode 101, concat headers.\n      //\n      if (reverseProxy.handshake.statusCode && reverseProxy.handshake.statusCode == 101) {\n        headers = [\n          'HTTP/1.1 101 Switching Protocols',\n          'Upgrade: websocket',\n          'Connection: Upgrade',\n          'Sec-WebSocket-Accept: ' + reverseProxy.handshake.headers['sec-websocket-accept']\n        ];\n\n        headers = headers.concat('', '').join('\\r\\n');\n      }\n\n      //\n      // Ok, kind of harmfull part of code. Socket.IO sends a hash\n      // at the end of handshake if protocol === 76, but we need\n      // to replace 'host' and 'origin' in response so we split\n      // data to printable data and to non-printable. (Non-printable\n      // will come after double-CRLF).\n      //\n      var sdata = data.toString();\n\n      // Get the Printable data\n      sdata = sdata.substr(0, sdata.search(CRLF + CRLF));\n\n      // Get the Non-Printable data\n      data = data.slice(Buffer.byteLength(sdata), data.length);\n\n      if (self.source.https && !self.target.https) {\n        //\n        // If the proxy server is running HTTPS but the client is running\n        // HTTP then replace `ws` with `wss` in the data sent back to the client.\n        //\n        sdata = sdata.replace('ws:', 'wss:');\n      }\n\n      try {\n        //\n        // Write the printable and non-printable data to the socket\n        // from the original incoming request.\n        //\n        self.emit('websocket:handshake', req, socket, head, sdata, data);\n        // add headers to the socket\n        socket.write(headers + sdata);\n        var flushed = socket.write(data);\n        if (!flushed) {\n          revSocket.pause();\n          socket.once('drain', function () {\n            try { revSocket.resume() }\n            catch (er) { console.error(\"reverseProxy.socket.resume error: %s\", er.message) }\n          });\n\n          //\n          // Force the `drain` event in 100ms if it hasn't\n          // happened on its own.\n          //\n          setTimeout(function () {\n            socket.emit('drain');\n          }, 100);\n        }\n      }\n      catch (ex) {\n        //\n        // Remove data listener on socket error because the\n        // 'handshake' has failed.\n        //\n        revSocket.removeListener('data', handshake);\n        return proxyError(ex);\n      }\n\n      //\n      // Remove data listener now that the 'handshake' is complete\n      //\n      revSocket.removeListener('data', handshake);\n    });\n  });\n\n  //\n  // Handle 'error' events from the `reverseProxy`.\n  //\n  reverseProxy.on('error', proxyError);\n  \n  reverseProxy.once('socket', function (socket) {    \n    // monitor proxy socket perf\n    if (perfdbg) {\n      var intl = setInterval(function(){\n        ///console.log('socket network performance:'+JSON.stringify(socket.netPerf));\n        if (socket && 'netPerf' in socket) {\n          var perf = socket.netPerf;\n          \n          if (perf && 'mpbsBandwidth' in perf) {           \n            console.log('socket network Bandwidth       :'+JSON.stringify(perf.mbpsBandwidth)+' Mb/s');\n            console.log('socket network RTT             :'+JSON.stringify(perf.msRTT)+' ms');\n            console.log('socket network PktSndPeriod    :'+JSON.stringify(perf.usPktSndPeriod)+' us');\n            console.log('socket network SendRate        :'+JSON.stringify(perf.mbpsSendRate)+' Mb/s');\n            console.log('socket network RecvRate        :'+JSON.stringify(perf.mbpsRecvRate)+' Mb/s');\n            console.log('socket network CongestionWindow:'+JSON.stringify(perf.pktCongestionWindow));\n            console.log('socket network RecvACK         :'+JSON.stringify(perf.pktRecvACK));\n            console.log('socket network RecvNACK        :'+JSON.stringify(perf.pktRecvNAK));\n            console.log('socket network AvailRcvBuf     :'+JSON.stringify(perf.byteAvailRcvBuf));\n            console.log('socket network AvailSndBuf     :'+JSON.stringify(perf.byteAvailSndBuf)+'\\n\\n');\n          }\n        }\n      }, 10000); // every 10000\n      \n      // handle socket close event exception before end event\n      socket.once('close', function(){\n        clearInterval(intl);\n        console.log('socket.onclose');\n      });\n    }\n  });\n\n  //\n  // Handle 'error' events from the `req` (e.g. `Parse Error`).\n  //\n  req.on('error', proxyError);\n\n  try {\n    //\n    // Attempt to write the upgrade-head to the reverseProxy\n    // request. This is small, and there's only ever one of\n    // it; no need for pause/resume.\n    //\n    // XXX This is very wrong and should be fixed in node's core\n    //\n    reverseProxy.write(head);\n    if (head && head.length === 0) {\n      reverseProxy._send('');\n    }\n  }\n  catch (ex) {\n    return proxyError(ex);\n  }\n\n  //\n  // If we have been passed buffered data, resume it.\n  //\n  if (buffer) {\n    return !errState\n      ? buffer.resume()\n      : buffer.destroy();\n  }\n};\n\n//\n// ### function close()\n// Closes all sockets associated with the Agents\n// belonging to this instance.\n//\nHttpProxy.prototype.close = function () {\n  [this.forward, this.target].forEach(function (proxy) {\n    if (proxy && proxy.agent) {\n      for (var host in proxy.agent.sockets) {\n        proxy.agent.sockets[host].forEach(function (socket) {\n          socket.end();\n        });\n      }\n    }\n  });\n};\n\n//\n// ### @private function _forwardRequest (req)\n// #### @req {ServerRequest} Incoming HTTP Request to proxy.\n// Forwards the specified `req` to the location specified\n// by `this.forward` ignoring errors and the subsequent response.\n//\nHttpProxy.prototype._forwardRequest = function (req) {\n  var self = this,\n      outgoing = new(this.forward.base),\n      forwardProxy;\n\n  //\n  // Setup outgoing proxy with relevant properties.\n  //\n  outgoing.host    = this.forward.host;\n  outgoing.port    = this.forward.port,\n  outgoing.agent   = this.forward.agent;\n  outgoing.method  = req.method;\n  outgoing.path    = req.url.match(/^(https?:)/gi)? url.parse(req.url).path : req.url;\n  outgoing.headers = req.headers;\n  \n  //\n  // Setup local interface to bind for target network connections\n  // \n  outgoing.localAddress = this.forward.localAddress;\n  \n  //\n  // Setup custom createConnection\n  //\n  outgoing.createConnection = this.forward.createConnection;\n        \n  //\n  // Open new HTTP request to internal resource with will\n  // act as a reverse proxy pass.\n  //\n  forwardProxy = this.forward.protocol.request(outgoing, function (response) {\n    //\n    // Ignore the response from the forward proxy since this is a 'fire-and-forget' proxy.\n    // Remark (indexzero): We will eventually emit a 'forward' event here for performance tuning.\n    //\n  });\n\n  //\n  // Add a listener for the connection timeout event.\n  //\n  // Remark: Ignoring this error in the event\n  //         forward target doesn't exist.\n  //\n  forwardProxy.once('error', function (err) { });\n\n  //\n  // Chunk the client request body as chunks from\n  // the proxied request come in\n  //\n  req.on('data', function (chunk) {\n    var flushed = forwardProxy.write(chunk);\n    if (!flushed) {\n      req.pause();\n      forwardProxy.once('drain', function () {\n        try { req.resume() }\n        catch (er) { console.error(\"req.resume error: %s\", er.message) }\n      });\n\n      //\n      // Force the `drain` event in 100ms if it hasn't\n      // happened on its own.\n      //\n      setTimeout(function () {\n        forwardProxy.emit('drain');\n      }, 100);\n    }\n  });\n\n  //\n  // At the end of the client request, we are going to\n  // stop the proxied request\n  //\n  req.on('end', function () {\n    forwardProxy.end();\n  });\n  \n  // \n  // Handle req.trailers\n  //\n  if (req.trailers) {\n    forwardProxy.end();\n  }\n};\n\nfunction getProto(req) {\n  return req.isSpdy ? 'https' : (req.connection.pair ? 'https' : 'http');\n}\n","/home/travis/build/npmtest/node-npmtest-httpp-proxy/node_modules/httpp-proxy/lib/node-http-proxy/proxy-table.js":"/*\n  node-http-proxy.js: Lookup table for proxy targets in node.js\n\n  Copyright (c) 2010 Charlie Robbins\n\n  Permission is hereby granted, free of charge, to any person obtaining\n  a copy of this software and associated documentation files (the\n  \"Software\"), to deal in the Software without restriction, including\n  without limitation the rights to use, copy, modify, merge, publish,\n  distribute, sublicense, and/or sell copies of the Software, and to\n  permit persons to whom the Software is furnished to do so, subject to\n  the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\nvar util = require('util'),\n    events = require('events'),\n    fs = require('fs'),\n    url = require('url');\n\n//\n// ### function ProxyTable (router, silent)\n// #### @router {Object} Object containing the host based routes\n// #### @silent {Boolean} Value indicating whether we should suppress logs\n// #### @hostnameOnly {Boolean} Value indicating if we should route based on __hostname string only__\n// #### @pathnameOnly {Boolean} Value indicating if we should route based on only the pathname.  __This causes hostnames to be ignored.__.  Using this along with hostnameOnly wont work at all.\n// Constructor function for the ProxyTable responsible for getting\n// locations of proxy targets based on ServerRequest headers; specifically\n// the HTTP host header.\n//\nvar ProxyTable = exports.ProxyTable = function (options) {\n  events.EventEmitter.call(this);\n\n  this.silent       = options.silent || options.silent !== true;\n  this.target       = options.target || {};\n  this.pathnameOnly = options.pathnameOnly === true;\n  this.hostnameOnly = options.hostnameOnly === true;\n\n  if (typeof options.router === 'object') {\n    //\n    // If we are passed an object literal setup\n    // the routes with RegExps from the router\n    //\n    this.setRoutes(options.router);\n  }\n  else if (typeof options.router === 'string') {\n    //\n    // If we are passed a string then assume it is a\n    // file path, parse that file and watch it for changes\n    //\n    var self = this;\n    this.routeFile = options.router;\n    this.setRoutes(JSON.parse(fs.readFileSync(options.router)).router);\n\n    fs.watchFile(this.routeFile, function () {\n      fs.readFile(self.routeFile, function (err, data) {\n        if (err) {\n          self.emit('error', err);\n        }\n\n        self.setRoutes(JSON.parse(data).router);\n        self.emit('routes', self.hostnameOnly === false ? self.routes : self.router);\n      });\n    });\n  }\n  else {\n    throw new Error('Cannot parse router with unknown type: ' + typeof router);\n  }\n};\n\n//\n// Inherit from `events.EventEmitter`\n//\nutil.inherits(ProxyTable, events.EventEmitter);\n\n//\n// ### function addRoute (route, target)\n// #### @route {String} String containing route coming in\n// #### @target {String} String containing the target\n// Adds a host-based route to this instance.\n//\nProxyTable.prototype.addRoute = function (route, target) {\n  if (!this.router) {\n    throw new Error('Cannot update ProxyTable routes without router.');\n  }\n\n  this.router[route] = target;\n  this.setRoutes(this.router);\n};\n\n//\n// ### function removeRoute (route)\n// #### @route {String} String containing route to remove\n// Removes a host-based route from this instance.\n//\nProxyTable.prototype.removeRoute = function (route) {\n  if (!this.router) {\n    throw new Error('Cannot update ProxyTable routes without router.');\n  }\n\n  delete this.router[route];\n  this.setRoutes(this.router);\n};\n\n//\n// ### function setRoutes (router)\n// #### @router {Object} Object containing the host based routes\n// Sets the host-based routes to be used by this instance.\n//\nProxyTable.prototype.setRoutes = function (router) {\n  if (!router) {\n    throw new Error('Cannot update ProxyTable routes without router.');\n  }\n\n  var self = this;\n  this.router = router;\n\n  if (this.hostnameOnly === false) {\n    this.routes = [];\n\n    Object.keys(router).forEach(function (path) {\n      if (!/http[s]?/.test(router[path])) {\n        router[path] = (self.target.https ? 'https://' : 'http://')\n          + router[path];\n      }\n\n      var target = url.parse(router[path]),\n          defaultPort = self.target.https ? 443 : 80;\n\n      //\n      // Setup a robust lookup table for the route:\n      //\n      //    {\n      //      source: {\n      //        regexp: /^foo.com/i,\n      //        sref: 'foo.com',\n      //        url: {\n      //          protocol: 'http:',\n      //          slashes: true,\n      //          host: 'foo.com',\n      //          hostname: 'foo.com',\n      //          href: 'http://foo.com/',\n      //          pathname: '/',\n      //          path: '/'\n      //        }\n      //    },\n      //    {\n      //      target: {\n      //        sref: '127.0.0.1:8000/',\n      //        url: {\n      //          protocol: 'http:',\n      //          slashes: true,\n      //          host: '127.0.0.1:8000',\n      //          hostname: '127.0.0.1',\n      //          href: 'http://127.0.0.1:8000/',\n      //          pathname: '/',\n      //          path: '/'\n      //        }\n      //    },\n      //\n      self.routes.push({\n        source: {\n          regexp: new RegExp('^' + path, 'i'),\n          sref: path,\n          url: url.parse('http://' + path)\n        },\n        target: {\n          sref: target.hostname + ':' + (target.port || defaultPort) + target.path,\n          url: target\n        }\n      });\n    });\n  }\n};\n\n//\n// ### function getProxyLocation (req)\n// #### @req {ServerRequest} The incoming server request to get proxy information about.\n// Returns the proxy location based on the HTTP Headers in the  ServerRequest `req`\n// available to this instance.\n//\nProxyTable.prototype.getProxyLocation = function (req) {\n  if (!req || !req.headers || !req.headers.host) {\n    return null;\n  }\n\n  var targetHost = req.headers.host.split(':')[0];\n  if (this.hostnameOnly === true) {\n    var target = targetHost;\n    if (this.router.hasOwnProperty(target)) {\n      var location = this.router[target].split(':'),\n          host = location[0],\n          port = location.length === 1 ? 80 : location[1];\n\n      return {\n        port: port,\n        host: host\n      };\n    }\n  }\n  else if (this.pathnameOnly === true) {\n    var target = req.url;\n    for (var i in this.routes) {\n      var route = this.routes[i];\n      //\n      // If we are matching pathname only, we remove the matched pattern.\n      //\n      // IE /wiki/heartbeat\n      // is redirected to\n      // /heartbeat\n      //\n      // for the route \"/wiki\" : \"127.0.0.1:8020\"\n      //\n      if (target.match(route.source.regexp)) {\n        req.url = url.format(target.replace(route.source.regexp, ''));\n        return {\n          protocol: route.target.url.protocol.replace(':', ''),\n          host: route.target.url.hostname,\n          port: route.target.url.port\n            || (this.target.https ? 443 : 80)\n        };\n      }\n    }\n\n  }\n  else {\n    var target = targetHost + req.url;\n    for (var i in this.routes) {\n      var route = this.routes[i];\n      if (target.match(route.source.regexp)) {\n        //\n        // Attempt to perform any path replacement for differences\n        // between the source path and the target path. This replaces the\n        // path's part of the URL to the target's part of the URL.\n        //\n        // 1. Parse the request URL\n        // 2. Replace any portions of the source path with the target path\n        // 3. Set the request URL to the formatted URL with replacements.\n        //\n        var parsed = url.parse(req.url);\n\n        parsed.pathname = parsed.pathname.replace(\n          route.source.url.pathname,\n          route.target.url.pathname\n        );\n\n        req.url = url.format(parsed);\n\n        return {\n          protocol: route.target.url.protocol.replace(':', ''),\n          host: route.target.url.hostname,\n          port: route.target.url.port\n            || (this.target.https ? 443 : 80)\n        };\n      }\n    }\n  }\n\n  return null;\n};\n\n//\n// ### close function ()\n// Cleans up the event listeneners maintained\n// by this instance.\n//\nProxyTable.prototype.close = function () {\n  if (typeof this.routeFile === 'string') {\n    fs.unwatchFile(this.routeFile);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-httpp-proxy/node_modules/httpp-proxy/lib/node-http-proxy/routing-proxy.js":"/*\n * routing-proxy.js: A routing proxy consuming a RoutingTable and multiple HttpProxy instances\n *\n * (C) 2011 Nodejitsu Inc.\n * MIT LICENCE\n *\n */\n\nvar events = require('events'),\n    utile = require('utile'),\n    HttpProxy = require('./http-proxy').HttpProxy,\n    ProxyTable = require('./proxy-table').ProxyTable;\n\n//\n// ### function RoutingProxy (options)\n// #### @options {Object} Options for this instance\n// Constructor function for the RoutingProxy object, a higher level\n// reverse proxy Object which can proxy to multiple hosts and also interface\n// easily with a RoutingTable instance.\n//\nvar RoutingProxy = exports.RoutingProxy = function (options) {\n  events.EventEmitter.call(this);\n\n  var self = this;\n  options = options || {};\n\n  if (options.router) {\n    this.proxyTable = new ProxyTable(options);\n    this.proxyTable.on('routes', function (routes) {\n      self.emit('routes', routes);\n    });\n  }\n\n  //\n  // Create a set of `HttpProxy` objects to be used later on calls\n  // to `.proxyRequest()` and `.proxyWebSocketRequest()`.\n  //\n  this.proxies = {};\n\n  //\n  // Setup default target options (such as `https`, 'httpp').\n  //\n  this.target = {};\n  this.target.https = options.target && options.target.https;\n  this.target.maxSockets = options.target && options.target.maxSockets;\n  \n  this.target.httpp = options.target && options.target.httpp;\n  this.target.localAddress = options.target ? options.target.localAddress : null;\n  \n  //\n  // Setup other default options to be used for instances of\n  // `HttpProxy` created by this `RoutingProxy` instance.\n  //\n  this.source  = options.source    || { host: 'localhost', port: 8000 };\n  this.https   = this.source.https || options.https;\n  this.httpp   = this.source.httpp || options.httpp;\n  this.enable  = options.enable;\n  this.forward = options.forward;\n  this.changeOrigin = options.changeOrigin || false;\n\n  //\n  // Listen for 'newListener' events so that we can bind 'proxyError'\n  // listeners to each HttpProxy's 'proxyError' event.\n  //\n  this.on('newListener', function (evt) {\n    if (evt === 'proxyError' || evt === 'webSocketProxyError') {\n      Object.keys(self.proxies).forEach(function (key) {\n        self.proxies[key].on(evt, self.emit.bind(self, evt));\n      });\n    }\n  });\n};\n\n\n//\n// Inherit from `events.EventEmitter`.\n//\nutile.inherits(RoutingProxy, events.EventEmitter);\n\n//\n// ### function add (options)\n// #### @options {Object} Options for the `HttpProxy` to add.\n// Adds a new instance of `HttpProxy` to this `RoutingProxy` instance\n// for the specified `options.host` and `options.port`.\n//\nRoutingProxy.prototype.add = function (options) {\n  var self = this,\n      key = this._getKey(options);\n\n  //\n  // TODO: Consume properties in `options` related to the `ProxyTable`.\n  //\n  options.target            = options.target       || {};\n  options.target.host       = options.target.host  || options.host;\n  options.target.port       = options.target.port  || options.port;\n  options.target.socketPath = options.target.socketPath || options.socketPath;\n  options.target.https      = this.target && this.target.https ||\n                              options.target && options.target.https;\n  options.target.maxSockets = this.target && this.target.maxSockets;\n  \n  options.target.httpp      = this.target && this.target.httpp ||\n                              options.target && options.target.httpp;\n\n  options.target.localAddress = (this.target ? this.target.localAddress : null) ||\n                                (options.target ? options.target.localAddress : null);\n                        \n  //\n  // Setup options to pass-thru to the new `HttpProxy` instance\n  // for the specified `options.host` and `options.port` pair.\n  //\n  ['https', 'httpp', 'enable', 'forward', 'changeOrigin'].forEach(function (key) {\n    if (options[key] !== false && self[key]) {\n      options[key] = self[key];\n    }\n  });\n\n  this.proxies[key] = new HttpProxy(options);\n\n  if (this.listeners('proxyError').length > 0) {\n    this.proxies[key].on('proxyError', this.emit.bind(this, 'proxyError'));\n  }\n\n  if (this.listeners('webSocketProxyError').length > 0) {\n    this.proxies[key].on('webSocketProxyError', this.emit.bind(this, 'webSocketProxyError'));\n  }\n\n  [\n    'start',\n    'forward',\n    'end',\n    'proxyResponse',\n    'websocket:start',\n    'websocket:end',\n    'websocket:incoming',\n    'websocket:outgoing'\n  ].forEach(function (event) {\n    this.proxies[key].on(event, this.emit.bind(this, event));\n  }, this);\n};\n\n//\n// ### function remove (options)\n// #### @options {Object} Options mapping to the `HttpProxy` to remove.\n// Removes an instance of `HttpProxy` from this `RoutingProxy` instance\n// for the specified `options.host` and `options.port` (if they exist).\n//\nRoutingProxy.prototype.remove = function (options) {\n  var key = this._getKey(options),\n      proxy = this.proxies[key];\n\n  delete this.proxies[key];\n  return proxy;\n};\n\n//\n// ### function close()\n// Cleans up any state left behind (sockets, timeouts, etc)\n// associated with this instance.\n//\nRoutingProxy.prototype.close = function () {\n  var self = this;\n\n  if (this.proxyTable) {\n    //\n    // Close the `RoutingTable` associated with\n    // this instance (if any).\n    //\n    this.proxyTable.close();\n  }\n\n  //\n  // Close all sockets for all `HttpProxy` object(s)\n  // associated with this instance.\n  //\n  Object.keys(this.proxies).forEach(function (key) {\n    self.proxies[key].close();\n  });\n};\n\n//\n// ### function proxyRequest (req, res, [port, host, paused])\n// #### @req {ServerRequest} Incoming HTTP Request to proxy.\n// #### @res {ServerResponse} Outgoing HTTP Request to write proxied data to.\n// #### @options {Object} Options for the outgoing proxy request.\n//\n//     options.port {number} Port to use on the proxy target host.\n//     options.host {string} Host of the proxy target.\n//     options.buffer {Object} Result from `httpProxy.buffer(req)`\n//     options.https {Object|boolean} Settings for https.\n//     options.httpp {boolean} Settings for httpp.\n//\nRoutingProxy.prototype.proxyRequest = function (req, res, options) {\n  options = options || {};\n\n  var location;\n\n  //\n  // Check the proxy table for this instance to see if we need\n  // to get the proxy location for the request supplied. We will\n  // always ignore the proxyTable if an explicit `port` and `host`\n  // arguments are supplied to `proxyRequest`.\n  //\n  if (this.proxyTable && !options.host) {\n    location = this.proxyTable.getProxyLocation(req);\n\n    //\n    // If no location is returned from the ProxyTable instance\n    // then respond with `404` since we do not have a valid proxy target.\n    //\n    if (!location) {\n      try {\n        if (!this.emit('notFound', req, res)) {\n          res.writeHead(404);\n          res.end();\n        }\n      }\n      catch (er) {\n        console.error(\"res.writeHead/res.end error: %s\", er.message);\n      }\n\n      return;\n    }\n\n    //\n    // When using the ProxyTable in conjunction with an HttpProxy instance\n    // only the following arguments are valid:\n    //\n    // * `proxy.proxyRequest(req, res, { host: 'localhost' })`: This will be skipped\n    // * `proxy.proxyRequest(req, res, { buffer: buffer })`: Buffer will get updated appropriately\n    // * `proxy.proxyRequest(req, res)`: Options will be assigned appropriately.\n    //\n    options.port = location.port;\n    options.host = location.host;\n  }\n\n  var key = this._getKey(options),\n      proxy;\n\n  if ((this.target && this.target.https)\n    || (location && location.protocol === 'https')) {\n    options.target = options.target || {};\n    options.target.https = true;\n  }\n  \n  if (this.target && this.target.httpp) {\n    options.target = options.target || {};\n    options.target.httpp = true;\n  }\n  \n  if (this.target && this.target.localAddress) {\n    options.target = options.target || {};\n    options.target.localAddress = this.target.localAddress;\n  }\n  \n  if (!this.proxies[key]) {\n    this.add(utile.clone(options));\n  }\n\n  proxy = this.proxies[key];\n  proxy.proxyRequest(req, res, options.buffer);\n};\n\n//\n// ### function proxyWebSocketRequest (req, socket, head, options)\n// #### @req {ServerRequest} Websocket request to proxy.\n// #### @socket {net.Socket} Socket for the underlying HTTP request\n// #### @head {string} Headers for the Websocket request.\n// #### @options {Object} Options to use when proxying this request.\n//\n//     options.port {number} Port to use on the proxy target host.\n//     options.host {string} Host of the proxy target.\n//     options.buffer {Object} Result from `httpProxy.buffer(req)`\n//     options.https {Object|boolean} Settings for https.\n//     options.httpp {boolean} Settings for httpp.\n//\nRoutingProxy.prototype.proxyWebSocketRequest = function (req, socket, head, options) {\n  options = options || {};\n\n  var location,\n      proxy,\n      key;\n\n  if (this.proxyTable && !options.host) {\n    location = this.proxyTable.getProxyLocation(req);\n\n    if (!location) {\n      return socket.destroy();\n    }\n\n    options.port = location.port;\n    options.host = location.host;\n  }\n\n  key = this._getKey(options);\n\n  if (!this.proxies[key]) {\n    this.add(utile.clone(options));\n  }\n\n  proxy = this.proxies[key];\n  proxy.proxyWebSocketRequest(req, socket, head, options.buffer);\n};\n\n//\n// ### function addHost (host, target)\n// #### @host {String} Host to add to proxyTable\n// #### @target {String} Target to add to proxyTable\n// Adds a host to proxyTable\n//\nRoutingProxy.prototype.addHost = function (host, target) {\n  if (this.proxyTable) {\n    this.proxyTable.addRoute(host, target);\n  }\n};\n\n//\n// ### function removeHost (host)\n// #### @host {String} Host to remove from proxyTable\n// Removes a host to proxyTable\n//\nRoutingProxy.prototype.removeHost = function (host) {\n  if (this.proxyTable) {\n    this.proxyTable.removeRoute(host);\n  }\n};\n\n//\n// ### @private function _getKey (options)\n// #### @options {Object} Options to extract the key from\n// Ensures that the appropriate options are present in the `options`\n// provided and responds with a string key representing the `host`, `port`\n// combination contained within.\n//\nRoutingProxy.prototype._getKey = function (options) {\n  if (!options || ((!options.host || !options.port)\n    && (!options.target || !options.target.host || !options.target.port))) {\n    throw new Error('options.host and options.port or options.target are required.');\n  }\n\n  return [\n    options.host || options.target.host,\n    options.port || options.target.port\n  ].join(':');\n};\n"}